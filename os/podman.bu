# butane config

storage:
  files:
    - path: /etc/tmpfiles.d/podman-docker.conf
      contents:
        inline: |
          # symlink /run/docker.sock to /run/podman/podman.sock, so compose will also use podman
          # L /symlink/to/create  -     -     -     - symlink/target/path
          L   /run/docker.sock    -     -     -     - /run/podman/podman.sock
          D!  /run/podman         0750  root  root

    # configure podman
    - path: /etc/containers/containers.conf
      contents:
        inline: |
          # our podman configuration
          [containers]
          default_capabilities = [ "CHOWN", "DAC_OVERRIDE", "FOWNER", "FSETID", "KILL", "NET_BIND_SERVICE", "SETFCAP", "SETGID", "SETPCAP", "SETUID", "SYS_CHROOT",]
          default_sysctls = [  "net.ipv4.ping_group_range=0 0",]
          # podman defaults to less capabilities than docker
          # docker additionally adds "AUDIT_WRITE", "MKNOD" and "NET_RAW"
          # if needed, use the --cap-add option or edit here
          dns_servers = ["{{ INTERNAL_CIDR|cidr2ip }}", ]

          [network]
          # make podman alias podman0 a 16Bit Network
          default_network="podman"
          default_subnet="{{ PODMAN_CIDR }}"
          # make podman1 to podman99 a 8Bit Network
          default_subnet_pools=[
          {%- for subnet in range(1,100) %}
            {"base" = "{{ PODMAN_POOL_CIDR|regex_search('^([0-9]+\\.[0-9]+)\\.[0-9]+.+')|first }}.{{ subnet }}.0/24", "size" = 24},
          {%- endfor %}
          ]

          [engine]
          runtime = "crun"

          [engine.runtimes]
          [engine.volume_plugins]
          [machine]
          [secrets.opts]

    # define podman0 network to use firewalld and the zone podman
    # XXX set the creation time of the podman network to the modification time of this file
    - path: /etc/containers/networks/podman.json
      mode: 0644
      contents:
        inline: |
          {
            "name": "podman",
            "id": "2f259bab93aaaaa2542ba43ef33eb990d0999ee1b9924b557b7be53c0b7a1bb9",
            "driver": "bridge",
            "network_interface": "podman0",
            "created": "{% set c= 'os/podman.bu'|created_at %}{{ c.isoformat().replace('+00:00', 'Z') }}",
            "subnets": [
              {
                "subnet": "{{ PODMAN_CIDR }}",
                "gateway": "{{ PODMAN_CIDR|cidr2ip }}"
              }
            ],
            "ipv6_enabled": false,
            "internal": false,
            "dns_enabled": false,
            "ipam_options": {
              "driver": "host-local"
            },
            "firewall_driver": "firewalld",
            "dns_name": "podman"
          }

    # pipe string list of requested credentials from butane env to service env
    - path: /etc/local/environment/container-secrets.env
      contents:
        inline: |
          PODMAN_LOAD_SECRETS={{ PODMAN_LOAD_SECRETS }}
          # be used by container-secrets.service

systemd:
  units:
    # mask docker.service/socket, because we will use podman only
    - name: docker.service
      mask: true

    - name: docker.socket
      mask: true

    # mask podman.socket, because we unconditional start podman
    - name: podman.socket
      mask: true

    # load /etc/credstore/${PODMAN_LOAD_SECRETS} into podman secrets
    - name: container-secrets.service
      enabled: true
      contents_local: os/container-secrets.service

    # overwrite podman.service: set explicit socket, dont exit on timeout, always enabled
    - name: podman.service
      enabled: true
      contents: |
        [Unit]
        Description=Podman API Service
        After=network-online.target rpm-ostree-install.service unbound.service
        Wants=network-online.target rpm-ostree-install.service unbound.service

        Documentation=man:podman-system-service(1)
        StartLimitIntervalSec=0

        [Service]
        Delegate=true
        Type=exec
        KillMode=process
        ExecStartPre=/usr/bin/bash -c "if test ! -d /run/podman; then mkdir -m 0750 /run/podman; fi"
        ExecStart=/usr/bin/podman --log-level={{ PODMAN_API_LOG_LEVEL }} system service --time 0 unix:///run/podman/podman.sock

        [Install]
        WantedBy=multi-user.target

