[Unit]
Description=Update Configuration by applying a (transpiled butane) saltstack config
After=boot-complete.target
Wants=boot-complete.target
ConditionPathExists={{ UPDATE_PATH }}/%N/sls/main.sls
# env from SystemConfigUpdate: UPDATE_USER, UPDATE_UID, UPDATE_SERVICE, UPDATE_PATH, UPDATE_USE_SUDO
# Run config update by building saltstack in a container, executing salt-call in container,
# mounting /etc, /var, /run from host into container, /etc is also mounted as /host_etc
# butane_to_salt() remaps files from /etc/[hosts,hostname,resolv.conf] to /host_etc/*

[Service]
Type=oneshot

# create config for saltstack container, use same fedora version as current coreos base
# $(cat /etc/system-release-cpe | sed -r "s/.+:([^:]+)$/\1/g")
ExecStart=/usr/bin/bash -c 'mkdir -p /etc/containers/build/%N && printf \
"FROM docker.io/library/fedora:42\
\nRUN dnf -y install salt salt-minion lsb-release && rm -rf /var/cache/* && dnf clean all && rm -rf /var/tmp/*\
\nCMD lsb_release -a\
\n" > /etc/containers/build/%N/Containerfile'

# build saltstack container
Environment=PODMAN_BUILD_OPTIONS=
ExecStart=/usr/bin/bash -c 'cd /etc/containers/build/%N && \
/usr/bin/podman build $PODMAN_BUILD_OPTIONS --tag localhost/%N:latest . '

# roughly equal to tools.py:salt_config()
Environment=resource_name="%n"
Environment=base_dir={{ UPDATE_PATH }}
Environment=root_dir={{ UPDATE_PATH }}/%N
Environment=tmp_dir={{ UPDATE_PATH }}/%N/tmp
Environment=sls_dir={{ UPDATE_PATH }}/%N/sls
Environment=pillar_dir={{ UPDATE_PATH }}/%N/pillar

# create a minion config
ExecStart=/usr/bin/bash -c '(\
  printf "id: ${resource_name}\\n"; \
  printf "local: True\\n"; \
  printf "file_client: local\\n"; \
  printf "default_top: base\\n"; \
  printf "state_top: top.sls\\n"; \
  printf "fileserver_followsymlinks: True\\n"; \
  printf "fileserver_ignoresymlinks: False\\n"; \
  printf "fileserver_backend:\\n  - roots\\n"; \
  printf "file_roots:\\n  base:\\n    - ${sls_dir}\\n"; \
  printf "pillar_roots:\\n  base:\\n    - ${pillar_dir}\\n"; \
  printf "grains:\\n"; \
  printf "  resource_name: ${resource_name}\\n"; \
  printf "  base_dir: ${base_dir}\\n"; \
  printf "  root_dir: ${root_dir}\\n"; \
  printf "  tmp_dir: ${tmp_dir}\\n"; \
  printf "  sls_dir: ${sls_dir}\\n"; \
  printf "  pillar_dir: ${pillar_dir}\\n"; \
  printf "root_dir: ${root_dir}\\n"; \
  printf "conf_file: ${root_dir}/minion\\n"; \
  printf "pki_dir: ${root_dir}/etc/salt/pki/minion\\n"; \
  printf "pidfile: ${root_dir}/var/run/salt-minion.pid\\n"; \
  printf "sock_dir: ${root_dir}/var/run/salt/minion\\n"; \
  printf "cachedir: ${root_dir}/var/cache/salt/minion\\n"; \
  printf "extension_modules: ${root_dir}/var/cache/salt/minion/extmods\\n"; \
  printf "log_level_logfile: quiet\\n"; \
  printf "log_file: /dev/null\\n"; \
) > ${root_dir}/minion'

# create sls/top.sls, pillar/top.sls, pillar/main.sls
ExecStart=/usr/bin/bash -c \
    'mkdir -p "${sls_dir}" "${pillar_dir}"; \
    printf "base:\\n  \\"*\\":\\n    - main\\n" > "${sls_dir}/top.sls"; \
    printf "base:\\n  \\"*\\":\\n    - main\\n" > "${pillar_dir}/top.sls"; \
    printf "resource_name: ${resource_name}\\n" > "${pillar_dir}/main.sls"'

# XXX use logdriver=none, to prevent duplicate logging in journald
# make a salt-call test/mock run, to see if update would abort midways
ExecStart=/usr/bin/podman run --rm --privileged --log-driver=none \
    -v /etc:/etc -v /etc:/host_etc -v /var:/var -v /run:/run -v /var/home:/home -v /var/roothome:/root \
    localhost/%N:latest \
    /usr/bin/salt-call -c ${root_dir} state.highstate mock=true

# do the actual update work
ExecStart=/usr/bin/podman run --rm --privileged --log-driver=none \
    -v /etc:/etc -v /etc:/host_etc -v /var:/var -v /run:/run -v /var/home:/home -v /var/roothome:/root \
    localhost/%N:latest \
    /usr/bin/salt-call -c ${root_dir} state.highstate

# reload systemd daemon to resync with state from disk
ExecStart=/usr/bin/systemctl daemon-reload

# enabled/disable by list created from butane_to_salt() translation
# XXX do not -o pipefail because if service_list is empty it would fail on pipe
ExecStart=/usr/bin/bash -c 'set -e; \
    echo "enable and disable each service that should be enabled/disabled" ; \
    for status in enabled disabled; do \
        if test "$status" = "enabled"; then action="enable"; else action="disable"; fi; \
        if test -e ${root_dir}/service_$status.list; then \
            service_list=$(cat ${root_dir}/service_$status.list | \
                grep -v "^#" | grep -v "^[[:space:]]*$" | sort | uniq | tr "\\n" " "); \
            if test "$service_list" != ""; then \
                echo "systemctl $action $service_list"; \
                systemctl $action $service_list; \
            fi; \
        fi; \
    done'

# reset failed units, restart by list created from butane2salt.jinja
# XXX dont act on template services, dont act on services without [Install] sections
# XXX do not -o pipefail because if changed is empty it would fail on pipe
ExecStart=/usr/bin/bash -c 'set -e; \
    echo "reset failed units and restart each service that got changed" ; \
    systemctl reset-failed; \
    if test -e ${root_dir}/service_changed.list; then \
        changed=$(cat ${root_dir}/service_changed.list | \
            grep -v "^#" | grep -v "^[[:space:]]*$" | sort | uniq); \
        if test "$changed" != ""; then \
            torestart=""; \
            templates=""; \
            for i in $changed; do \
                if test "$(echo $i | sed -r "s/([^@]+)@.*/\\1/g")" != "$i"; then \
                    templates="$templates $i"; \
                else \
                    wantedby=$(systemctl show "$i.service" --property=WantedBy --value); \
                    if test "$wantedby" != ""; then \
                        if test "$torestart" = ""; then \
                            torestart="$i"; \
                        else \
                            torestart="$torestart $i"; \
                        fi; \
                    fi; \
                fi; \
            done; \
            if test "$torestart" != ""; then \
                echo "Restarting: $torestart"; \
                systemctl restart $torestart; \
            fi; \
            if test "$templates" != ""; then \
                echo "Information: Templates changed: $templates"; \
            fi; \
        fi; \
    fi'

# delete main.sls and var/cache|log because of secrets and as flag that update is done
ExecStart=/usr/bin/bash -c 'rm -f ${sls_dir}/main.sls; rm -rf ${root_dir}/var/cache; rm -rf ${root_dir}/var/log'

# XXX have no [Install] section, because this service is only called from external
