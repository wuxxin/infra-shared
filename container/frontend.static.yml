# static traefik config

log:
  level: "{{ FRONTEND['VERBOSITY'] }}"

global:
  checkNewVersion: false
  sendAnonymousUsage: false

# {% if FRONTEND["DASHBOARD"] is not none %}
# define service api@internal if FRONTEND:DASHBOARD is enabled
api:
  dashboard: true
# {% endif %}

# define service ping@internal, so healthcheck can be done
ping:
  entryPoint: "healthcheck"

entryPoints:
  http-plain:
    address: ":80"
    http:
      redirections:
        entryPoint:
          to: https
          scheme: https

  https:
    address: ":443"
    http:
      tls:
        options: default

  healthcheck:
    address: ":8080"

# {% if "ENTRYPOINTS" in FRONTEND %}
  # add custom entrypoints
  # {% for key, value in FRONTEND["ENTRYPOINTS"].items() %}
    # {% set entry={key: value} %}
{{ entry|toyaml|indent(2,True) }}
  # {% endfor %}
# {% endif %}

providers:
  docker:
    # .container and compose container can be configured for traefik with labels
    endpoint: tcp://{{ INTERNAL_CIDR|cidr2ip }}:2375
    watch: true
    exposedbydefault: false

  file:
    # frontend-post-up.service writes frontend.dynamic.yml to /traefik
    # systemd-nspawn@.service.d/20_discovery.conf reads NSPAWN_TRAEFIK from env
    #   /etc/nspawn/environment/%i.env and writes results to /traefik volume as *.yml
    directory: /traefik
    watch: true

# {% if "PROVIDERS" in FRONTEND %}
  # add custom providers
  # {% for key, value in FRONTEND["PROVIDERS"].items() %}
    # {% set provider={key: value} %}
{{ provider|toyaml|indent(2,True) }}
  # {% endfor %}
# {% endif %}

certificatesResolvers:
# {%- if LOCAL_ACME_SERVER["ENABLED"] %}
  acmeinternal:
    acme:
      caServer: "https://acme.internal:9000/acme/internal/directory"
      # certificates of caServer are signed by sub ca of root_bundle
      caCertificates:
        - /run/secrets/root_bundle.crt
      dnsChallenge:
        provider: rfc2136
        # delayBeforeCheck: Time to wait for DNS propagation
        delayBeforeCheck: 15s
        resolvers:
          - "knot.internal:53"
      # storage: Path to store ACME certificates
      storage: "/traefik/acme-internal.json"
      # Key type for requested certificates (EC256, EC384, RSA2048, RSA4096, RSA8192)
      keyType: EC256
# {%- endif %}
# {% if "CERTIFICATESRESOLVERS" in FRONTEND %}
  # add custom resolvers
  # {% for key, value in FRONTEND["CERTIFICATESRESOLVERS"].items() %}
    # {% set resolver={key: value} %}
{{ resolver|toyaml|indent(2,True) }}
  # {% endfor %}
# {% endif %}


# {% if "EXTRA" in FRONTEND %}
# add additional traefik static config string
{{ FRONTEND["EXTRA"] }}
# {% endif %}

# end of traefik "static" config
