[Unit]
Description=Traefik Edge Router that uses container labels and yaml files for service discovery
Wants=container-build@%N.service container-secrets.service apiproxy.service
After=container-build@%N.service container-secrets.service apiproxy.service
{% if not FRONTEND["ENABLED"] %}
# frontend is disabled, but we are a quadlet, so we try to stop it with a nonexisting path
ConditionPathExists=/notexisting/frontend_disable
{% endif%}

[Service]
# environment loaded here is available in systemd-quadlet scope
EnvironmentFile=-/etc/containers/environment/%N-systemd.env
Restart=on-failure

[Container]
Image=localhost/%N:latest

# If an image is updated in local storage, Podman restarts the systemd unit
AutoUpdate=local

# environment loaded here is available for container scope, mind quadlet bug "=-"
# EnvironmentFile=/etc/containers/environment/%N.env

# allow ports < 1024
PodmanArgs=--sysctl=net.ipv4.ip_unprivileged_port_start=0

# configure access to tls, frontend can present itself with server.*
Secret=root_bundle.crt,mode=0640
Secret=root_ca.crt,mode=0640
Secret=server.crt,mode=0640
Secret=server.key,mode=0640

# traefik static configuration
Volume=/etc/containers/systemd/%N.static.yml:/etc/traefik/traefik.yml:ro
# /traefik directory is used for service discovery
# /traefik/letsencrypt.json for optional letsencrypt state
# frontend-post-up.service writes frondend.dynamic.yml to /traefik
Volume=frontend.volume:/traefik

# use the ping api at port 8080 on localhost as a healthcheck
HealthCmd=wget -qSO /dev/null http://127.0.0.1:8080/ping

# Publish http and https to [hostip:]hostPort:containerPort
PublishPort=443:443
PublishPort=80:80
{% if "PUBLISHPORTS" in FRONTEND %}
  {% for portdef in FRONTEND["PUBLISHPORTS"] %}
PublishPort={{ portdef }}
  {% endfor %}
{% endif %}

[Install]
WantedBy=multi-user.target

