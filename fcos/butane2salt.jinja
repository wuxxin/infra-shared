{# translates a subset of a one file butane spec into a one file saltstack salt spec

to be used from the systemd service "update-system-config.service",
which executes a saltstack salt-call command, with the output of this translation as main.sls
this updates the config of the machine to the desired state.

if SALT_CHANGE_DETECT:false is true, it also writes /run/user/1000/update-system-config/
service_enabled.list, service_disabled.list, service_masked.list and service_changed.list

to tell the update service which services should be
enabled or disabled and which are changed and therefore need a restart.
masked services are masked within the salt-call, and not in the update service.

#}
{#

write out user,group,mode if present

#}
{%- macro user_group_mode(o) -%}
{%- if o.user is defined -%}
{%- if o.user.id is defined   %}    - user: {{ o.user.id }}{% endif %}
{%- if o.user.name is defined %}    - user: {{ o.user.name }}{% endif %}
{%- endif -%}
{%- if o.group is defined -%}
{%- if o.group.id is defined   %}    - group: {{ o.group.id }}{% endif %}
{%- if o.group.name is defined %}    - group: {{ o.group.name }}{% endif %}
{%- endif -%}
{%- if o.mode is defined %}    - mode: {{ "%#o"|format(o.mode) }}{% endif %}
{%- endmacro -%}
{#

replace filename with /host_etc prefix if in /etc/hostname, /etc/hosts, /etc/resolv.conf

#}
{% macro tr_etc(f) %}{% if f in ["/etc/hostname","/etc/hosts","/etc/resolv.conf"] %}{% set f=f|replace("/etc", "/host_etc") %}{% endif %}{{ f }}{% endmacro %}
{#

create service change/enable/disable macros and accumulator targets

#}
{% set UPDATE_DIR="/run/user/1000/update-system-config" %}
{% if SALT_CHANGE_DETECT|d(false) %}
{#

write service to service_enabled.list, service_disabled.list, service_masked.list

#}
{%- macro service_status(service_path, service_name, action) -%}

service_{{ action }}_{{ service_path }}:
  file:
    - accumulated
    - filename: {{ UPDATE_DIR }}/service_{{ action }}.list
    - text: {{ service_name }}
    - require_in:
      - file: service_{{ action }}

{%- endmacro -%}
{% macro service_enable(p, n) %}{{ service_status(p, n, "enabled") }}{% endmacro %}
{% macro service_disable(p, n) %}{{ service_status(p, n, "disabled") }}{% endmacro %}
{% macro service_mask(p, n) %}{{ service_status(p, n, "masked") }}{% endmacro %}
{#

write service to service_changed.list if target changed

#}
{%- macro service_changed(service, target, target_type) -%}

service_changed_{{ target }}:
  file:
    - accumulated
    - filename: {{ UPDATE_DIR }}/service_changed.list
    - text: {{ service }}
    - onchanges:
      - {{ target_type }}: {{ target }}
    - require_in:
      - file: service_changed

{%- endmacro -%}
{#

if target matches regex_list , call service_changed(service, target)

regex_list:
  - any unit in systemd/system/*.*
  - any dropin in systemd/system/*.d/*.conf
  - any env in [local,containers,compose]/*.env
  - any file in [containers,compose]/build/*/*

#}
{%- macro target_changed(target, target_type="file") -%}
  {%- set service_regex_list = [
    "/etc/systemd/system/([^/]+)\.[^\.]+",
    "/etc/systemd/system/([^/]+)\.[^\.]+\.d/.+\.conf",

    "/etc/local/environment/([^/.]+)\..*env",
    "/etc/containers/environment/([^/.]+)\..*env",
    "/etc/compose/environment/([^/.]+)\..*env",

    "/etc/containers/systemd/([^/.]+)\..+",

    "/etc/containers/build/([^/]+)/.+",
    "/etc/compose/build/([^/]+)/.+",
  ] -%}
  {%- set target_ns= namespace(service_name="") -%}
  {%- for service_regex in service_regex_list -%}
    {%- if target|regex_match("^" ~ service_regex~ "$") -%}
      {%- set target_ns.service_name = target|regex_replace(service_regex, '\\1') -%}
    {%- endif -%}
  {%- endfor -%}
  {%- if target_ns.service_name != "" -%}
{{ service_changed(target_ns.service_name, target, target_type) }}
  {%- endif -%}
{%- endmacro -%}
{#

Accumulator targets for service_ enabled, disabled, changed

#}
  {% for s in ["enabled", "disabled", "masked", "changed"] %}
create_service_{{ s }}:
  file:
    - managed
    - name: {{ UPDATE_DIR }}/service_{{ s }}.list
    - user: 1000
    - group: 1000

service_{{ s }}:
  file:
    - blockreplace
    - name: {{ UPDATE_DIR }}/service_{{ s }}.list
    - marker_start: "# START"
    - marker_end: "# END"
    - content: ""
    - append_if_not_found: True
    - show_changes: True
    - require:
      - file: create_service_{{ s }}
  {% endfor %}

{% else %}
{#

mask service change/enable/disable macros

#}
{%- macro service_status(service_path, service_name, action) -%}
{%- endmacro -%}
{%- macro service_enable(service_path, service_name) -%}
{%- endmacro -%}
{%- macro service_disable(service_path, service_name) -%}
{%- endmacro -%}
{%- macro service_mask(service_path, service_name) -%}
{%- endmacro -%}
{%- macro service_changed(service, target, target_type) -%}
{%- endmacro -%}
{%- macro target_changed(target, target_type="file") -%}
{%- endmacro -%}

{% endif %}
{#

Main Translation of storage:directories, links, files, systemd units and dropins

#}
{%- if "storage" in butane and "directories" in butane.storage %}
  {%- for d in butane.storage.directories %}
{{ d.path }}:
  file:
    - directory
    - makedirs: true
{{ user_group_mode(d) }}
  {% endfor %}
{%- endif %}


{%- if "storage" in butane and "links" in butane.storage %}
  {%- for l in butane.storage.links %}
{{ l.path }}:
  file:
    - symlink
    - makedirs: True
    {%- if l.target is defined %}
    - target: {{ l.target }}
    {%- endif %}
    {%- if l.hard is defined and l.hard %}
    - hard: true
    {%- endif %}
{{ user_group_mode(l) }}
{{ target_changed(l.path) }}
  {% endfor %}
{%- endif %}


{%- if "storage" in butane and "files" in butane.storage %}
  {%- for f in butane.storage.files %}
    {%- set target_type="file" %}
{{ tr_etc(f.path) }}:
  file:
    - managed
    - makedirs: True
{{ user_group_mode(f) }}
    {%- if f.contents is defined %}
      {%- if f.contents.source is defined %}
        {%- if f.contents.source.startswith("data:") %}
          {%- set target_type="cmd" %}
  cmd:
    - run
    - name: |
        cat <<"EOF" | base64 -d > {{ tr_etc(f.path) }}
        {{ f.contents.source|indent(8) }}
        EOF
    - unless: base64 -d < {{ tr_etc(f.path) }} | cmp -s {{ tr_etc(f.path) }} -
    - creates: {{ tr_etc(f.path) }}
        {%- else %}
    - source: {{ f.contents.source }}
        {%- endif %}
      {%- endif %}
      {%- if f.verification is defined %}
    - source_hash: {{ f.verification[7:] }}
      {%- endif %}
      {%- if f.contents.inline is defined %}
    - contents: |
        {{ f.contents.inline|indent(8) }}

      {%- endif %}
    {%- endif %}
{{ target_changed(tr_etc(f.path), target_type) }}
  {% endfor %}
{%- endif %}


{%- if "systemd" in butane and "units" in butane.systemd %}
  {%- for u in butane.systemd.units %}
    {%- set up= "/etc/systemd/system/" ~ u.name %}
    {%- if u.enabled is defined %}
{{ service_status(up, u.name, "enabled" if u.enabled else "disabled") }}
    {%- endif %}
    {%- if not u.mask|d(false) %}
      {%- if u.contents is defined %}
{{ up }}:
  file:
    - managed
    # XXX do not follow_symlinks, because if masked file is symlinked to /dev/null
    - follow_symlinks: False
    - contents: |
        {{ u.contents|indent(8) }}

{{ target_changed(up) }}
      {%- endif %}
    {%- else %}
{{ up }}:
  file:
    - symlink
    # XXX force to replace a normal file, because if real file exists beforehand
    - force: True
    - target: /dev/null
{{ target_changed(up) }}
{{ service_mask(up, u.name) }}
    {%- endif %}

    {%- if u.dropins is defined %}
      {%- for d in u.dropins %}
        {%- set dp="/etc/systemd/system/" ~ u.name ~ ".d/" ~ d.name %}
{{ dp }}:
  file:
    - managed
    - makedirs: True
        {%- if d.contents is defined %}
    - contents: |
        {{ d.contents|indent(8) }}

        {%- endif %}
{{ target_changed(dp) }}
      {% endfor %}
    {%- endif %}
  {% endfor %}
{%- endif %}
