# nspawn butane config
# {% macro cidr2ip(cidr) %}{{ cidr|regex_replace ('([^/]+)/.+', '\\1') }}{% endmacro %}

storage:
  directories:
    # standard *.nspawn directory
    #- path: /etc/systemd/nspawn

    # standard nspawn machine image base directory
    #- path: /var/lib/machines

    # our nspawn volume storage base directory
    - path: /var/lib/volumes

    # our nspawn build configuration directory
    - path: /etc/nspawn/build

    # our nspawn environment directory
    - path: /etc/nspawn/environment
      mode: 0700

  files:
    # our systemd-nspawn bridge (configured using systemd-networkd)
    - path: /etc/systemd/network/10-nspawn.netdev
      mode: 420
      contents:
        inline: |
          [NetDev]
          Name=nspawn
          Kind=bridge

          [Bridge]
          STP=false

    - path: /etc/systemd/network/10-nspawn.network
      mode: 420
      contents:
        inline: |
          [Match]
          Name=nspawn

          [Network]
          Description=Default Network for systemd-nspawn machines
          Address={{ NSPAWN_CIDR }}
          IPMasquerade=ipv4
          LinkLocalAddressing=no
          DHCPServer=yes
          ConfigureWithoutCarrier=yes

          [DHCPServer]
          ServerAddress={{ NSPAWN_CIDR }}
          DNS={{ cidr2ip(INTERNAL_CIDR) }}

  trees:
    # unconditional copy containerfiles
    - path: /etc/containers/build/debian-bookworm
      local: Containerfile/debian-bookworm

  links:
    # symlink systemd-networkd for automatic start, because nspawn.bu uses networkd
    - path: /etc/systemd/system/multi-user.target.wants/systemd-networkd.service
      target: /usr/lib/systemd/system/systemd-networkd.service

systemd:
  units:
    - name: nspawn-build@.service
      contents_local: fcos/nspawn-build@.service

    - name: systemd-nspawn@.service
      dropins:
        - name: nspawnargs.conf
          contents: |
            [Service]
            # add "network-bridge=nspawn" to default parameter
            ExecStart=
            ExecStart=systemd-nspawn --quiet --keep-unit --boot --link-journal=try-guest --network-veth --network-bridge=nspawn -U --settings=override --machine=%i

        # add root_bundle and root_ca to default available credentials
        - name: loadcreds.conf
          contents: |
            [Service]
            ImportCredential=root_bundle.crt
            ImportCredential=root_ca.crt

        - name: 00_provision.conf
          contents: |
            [Unit]
            # add nspawn-build@%i as hard dependency
            After=nspawn-build@%i.service
            Requires=nspawn-build@%i.service
            ConditionPathExists=/etc/systemd/nspawn/%i.nspawn
            ConditionPathExists=/etc/nspawn/environment/%i.env
            ConditionPathExists=/etc/nspawn/build/%i/nspawn.provision.sh

            [Service]
            EnvironmentFile=/etc/nspawn/environment/%i.env
            # Environment NSPAWN_PROVISION should be set and will be pasted to STDIN of provision script

            # firstboot defaults, to prevent interactive prompting, can be overwritten via drop.in
            SetCredential=firstboot.locale:en_US.UTF-8
            SetCredential=firstboot.keymap:us
            SetCredential=firstboot.timezone:UTC

            # copy provision files to /root at new machine and execute provision
            ExecStartPost=/usr/bin/bash -c 'set -eo pipefail; \
            if test -e "/var/lib/machines/.%i.NEED.PROVISION"; then \
              printf "Provision %i"; \
              while ! machinectl list -a --no-legend | grep -q "^%i"; do echo -n "."; sleep 1; done; \
              while ! machinectl show "%i" | grep -q State=running; do echo -n "+"; sleep 1; done; \
              sleep 1; echo " is running"; \
              for f in /etc/nspawn/build/%i/*; do \
                cat "$f" | systemd-run -q -G -P -u provision-%i -M %i --wait --service-type=exec \
                  /bin/bash -c "cat -- > /root/$(basename $f)"; \
              done; \
              echo "${NSPAWN_PROVISION}" | systemd-run -q -G -P -u provision-%i -M %i --wait --service-type=exec \
                  /bin/bash -c "chmod +x /root/nspawn.provision.sh && /root/nspawn.provision.sh --provision"; \
              rm "/var/lib/machines/.%i.NEED.PROVISION"; \
              touch "/etc/local/flags/provision-%i.stamp"; \
            else \
              echo "provision of %i skipped, already run"; \
            fi \
            '

        - name: 10_discovery.conf
          contents: |
            [Unit]
            After=frontend.service dnsresolver.service
            Wants=frontend.service dnsresolver.service

            [Service]
            # dns and frontend service discovery
            # create entries on post start, remove on post stop

            # StartPost
            # extract ipaddr from machinectl, replace ##NSPAWN_IPADDR## in NSPAWN_TRAEFIK
            # update DNS via unbound-control local_data
            # cp service configuration to traefik

            ExecStartPost=/usr/bin/bash -c 'set -eo pipefail; \
              if test -e /etc/nspawn/environment/%i.env; then \
                while ! machinectl list -a --no-legend | grep -q "^%i"; do echo -n "."; sleep 1; done; \
                while ! machinectl status "%i" | grep -q "State: running"; do sleep 1; done; \
                echo "Sleeping 5 sec to be sure to get usable ip from machine %i"; sleep 5; \
                IPADDR=$(machinectl list --no-pager --no-legend --max-addresses 1 -l | grep "%i" | sed -r "s/.+ ([^ ]+)$/\\1/g"); \
                IPPTR=$(printf "$IPADDR." | tac -s. | sed -r "s/.$/.in-addr.arpa/"); \
                echo "$IPADDR" > /etc/local/flags/%i.ipaddr; \
                echo "$IPPTR" > /etc/local/flags/%i.ipptr; \
                echo "adding machine %i.nspawn with ip $IPADDR to DNS"; \
                podman exec systemd-dnsresolver unbound-control local_data "%i.nspawn" A "$IPADDR"; \
                podman exec systemd-dnsresolver unbound-control local_data "$IPPTR" PTR "%i.nspawn"; \
                . /etc/nspawn/environment/%i.env; \
                TRAEFIK_YML="$(echo "$$NSPAWN_TRAEFIK" | sed -r "s/##NSPAWN_IPADDR##/$IPADDR/g")"; \
                if test "$TRAEFIK_YML" != "$(cat /etc/local/frontend/%i.yml)"; then \
                  echo "adding machine %i ($IPADDR) to frontend"; \
                  echo "$TRAEFIK_YML" > /etc/local/frontend/%i.yml; \
                  podman cp /etc/local/frontend/%i.yml "systemd-frontend:/traefik/%i.yml"; \
                else \
                  echo "machine %i ($IPADDR) already added and identical"; \
                fi; \
              fi'

            # StopPost
            # use unbound-control to remove DNS local_data
            # post empty string to discoveryfile so service is seen as removed by traefik

            ExecStopPost=/usr/bin/bash -c 'set -eo pipefail; \
              echo "removing machine %i from dnsresolver and frontend"; \
              podman exec systemd-dnsresolver unbound-control local_data_remove "%i.nspawn"; \
              if test -e /etc/local/flags/%i.ipptr; then \
                IPPTR=$(cat /etc/local/flags/%i.ipptr); \
                podman exec systemd-dnsresolver unbound-control local_data_remove "$IPPTR"; \
              fi; \
              printf "" > /etc/local/frontend/%i.yml; \
              podman cp /etc/local/frontend/%i.yml "systemd-frontend:/traefik/%i.yml"'

